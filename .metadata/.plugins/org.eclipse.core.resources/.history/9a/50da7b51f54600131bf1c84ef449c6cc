package com.droidbrew.javakoans.eagkoans;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import static org.junit.Assert.*;
import static com.droidbrew.javakoans.eagkoans.base.Koan.*;

public class E_AboutIdiomaticGenerics {
	
	// Fake Implementation of old library
	class ServletRequest{
		@SuppressWarnings({ "rawtypes", "unchecked" })
		public Map getParameterMap() {
			Map data = new HashMap();
			data.put("car_brands", new String[]{"audi", "volvo"});
			return data;
		}
		
	}
	
	static class NoWarn {
		public static Map<String, String[]> getParameterMap(ServletRequest r) 
		{
			// look how to get minimal code affection by @SuppressWarnings on declaration command
			@SuppressWarnings("unchecked") Map<String, String[]> result = r.getParameterMap();
			return result;
		}
	}
	
	@Test
	public void a_____prefer_generics_in_new_code_and_reduce_suppressing(){
		assertEquals(___, NoWarn.getParameterMap(new ServletRequest()).get("car_brands")[0]);
	}
	
	@Test
	public void b_____prefer_lists_to_arrays(){
		// Arrays are covariant but generics are invariant
		
		// Fails at runtime!
		Object[] objectArray = new Long[1];
		objectArray[0] = "I don't fit in"; // Throws ArrayStoreException - run the test and see
		
		// Won't compile! Uncomment the following lines
		// List<Object> ol = new ArrayList<Long>(); // Incompatible types
		// ol.add("I don't fit in");
		
	}
	
	class ClassCracker<T>{
		public String whichClass(){
			return this.getClass().getSimpleName();
		}
	}
	
	@Test
	public void c_____prefer_lists_to_arrays_2(){
		// Arrays are refied, generics implemented by erasure for compatibility with legacy code
		assertEquals(___, (new Integer[100]).getClass().getSimpleName());
		assertEquals(___, (new ClassCracker<Integer>()).whichClass());
	}
}
