package com.droidbrew.javakoans.eagkoans;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

import static org.junit.Assert.*;
import static com.droidbrew.javakoans.eagkoans.base.Koan.*;

import org.junit.Test;

class Compositor{
	// Generic method
	public static <E> Set<E> union(Set<E> s1, Set<E> s2) {
	Set<E> result = new HashSet<E>(s1);
	result.addAll(s2);
	return result;
	}
}

class Animal{
	public void eat(){}
	public void makeAnotherAnimal(){}
}

public class B_AboutGenericMethods {
	@Test
	public void a_____we_can_allow_multytype_parameters_for_generic_method(){
		assertEquals(___, Reflector.getMethodNames(new Animal()));
		assertEquals(___, Reflector.getMethodNames(new Stack<String>()));
		assertEquals(___, Reflector.getMethodNames(new BigDecimal(0)));
	}
}

// Meditate on question: how we can call declared methods of T inside generic methods and classes? 
// What if we will need some specific behavior of T, U etc...