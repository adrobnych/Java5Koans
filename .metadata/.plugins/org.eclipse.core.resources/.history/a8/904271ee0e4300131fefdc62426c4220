package com.droidbrew.javakoans.eagkoans;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

import static org.junit.Assert.*;
import static com.droidbrew.javakoans.eagkoans.base.Koan.*;

import org.junit.Test;

// imagine we're in place of client code using generic GasStation and want to send different classes
// to fill method

class MilitaryUnit{
	class Hammer implements Vehicle{
		@Override
		public String fillTank() {
			return "Ready to Rock'n'roll, Baby!";
		}
	}
	
	class Apache implements Vehicle{
		@Override
		public String fillTank() {
			return "Eager to kick some but!";
		}
	}
	
	private Vehicle machines[] = {new Hammer(), new Hammer(), new Apache()};
	private C_AboutGenericsBoundTypes.GasStationVersion2 gasStation;

	public void setGasStation(C_AboutGenericsBoundTypes.GasStationVersion2 gasStation) {
		this.gasStation = gasStation;
	}
	
	public String 
}


public class D_AboutGenericsWildcards {
	@Test
	public void a_____generics_without_bounding_are_crosstype_but_blind_to_specific_methods(){
		assertEquals(___, new GasStationVersion1().fill(new Car("Ford")));
	}
	
	@Test
	public void b_____generics_without_bounding_has_no_defence_from_stuppid_use(){
		assertEquals(___, new GasStationVersion1().fill(100));
	}
	
	class GasStationVersion2{
		public <T extends Vehicle> String fill(T vehicle){
			String result = "";
			result += "I'm going to serve " + vehicle.toString();
			result += " " + vehicle.fillTank();
			return result;
		}
	}

	@Test
	public void c_____generics_with_bounding_have_reduced_crosstyping_but_see_specific_methods(){
		assertEquals(___, new GasStationVersion2().fill(new Car("Ford")));
	}
	
	@Test
	public void d_____generics_with_bounding_do_has_defence_from_stuppid_use(){
		// assertEquals(___, new GasStationVersion2().fill(100)); 
		// implement Vehicle in couple ways and play with fill method
	}
}
